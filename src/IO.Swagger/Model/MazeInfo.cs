/* 
 * A-maze-ing API
 *
 * This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Information related to a Maze.
    /// </summary>
    [DataContract]
    public partial class MazeInfo :  IEquatable<MazeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MazeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public MazeInfo()
        {
        }
        
        /// <summary>
        /// The name of the maze. Might give you a hint regarding its structure.
        /// </summary>
        /// <value>The name of the maze. Might give you a hint regarding its structure.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// How many tiles exist in this maze.
        /// </summary>
        /// <value>How many tiles exist in this maze.</value>
        [DataMember(Name="totalTiles", EmitDefaultValue=false)]
        public int? TotalTiles { get; private set; }

        /// <summary>
        /// The total available reward in this maze.
        /// </summary>
        /// <value>The total available reward in this maze.</value>
        [DataMember(Name="potentialReward", EmitDefaultValue=false)]
        public int? PotentialReward { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MazeInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalTiles: ").Append(TotalTiles).Append("\n");
            sb.Append("  PotentialReward: ").Append(PotentialReward).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MazeInfo);
        }

        /// <summary>
        /// Returns true if MazeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MazeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MazeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TotalTiles == input.TotalTiles ||
                    (this.TotalTiles != null &&
                    this.TotalTiles.Equals(input.TotalTiles))
                ) && 
                (
                    this.PotentialReward == input.PotentialReward ||
                    (this.PotentialReward != null &&
                    this.PotentialReward.Equals(input.PotentialReward))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TotalTiles != null)
                    hashCode = hashCode * 59 + this.TotalTiles.GetHashCode();
                if (this.PotentialReward != null)
                    hashCode = hashCode * 59 + this.PotentialReward.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
