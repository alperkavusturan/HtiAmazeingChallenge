/* 
 * A-maze-ing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The data structure that represents information related to a player.
    /// </summary>
    [DataContract]
    public partial class PlayerInfo :  IEquatable<PlayerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerInfo" /> class.
        /// </summary>
        /// <param name="playerId">The public unique identifier of a player..</param>
        /// <param name="name">The name a player has chosen to represent her..</param>
        /// <param name="isInPlaythrough">An indication of whether a player is currently playing a maze or not..</param>
        /// <param name="maze">The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze..</param>
        /// <param name="hasFoundEasterEgg">Wink wink..</param>
        /// <param name="mazeScoreInHand">How much score the player has in her hand. Only available if player is playing a maze..</param>
        /// <param name="mazeScoreInBag">How much score the player has in her bag. Only available if player is playing a maze..</param>
        /// <param name="playerScore">The accumulated score across all played mazes..</param>
        public PlayerInfo(string playerId = default(string), string name = default(string), bool? isInPlaythrough = default(bool?), string maze = default(string), bool? hasFoundEasterEgg = default(bool?), int? mazeScoreInHand = default(int?), int? mazeScoreInBag = default(int?), int? playerScore = default(int?))
        {
            this.PlayerId = playerId;
            this.Name = name;
            this.IsInPlaythrough = isInPlaythrough;
            this.Maze = maze;
            this.HasFoundEasterEgg = hasFoundEasterEgg;
            this.MazeScoreInHand = mazeScoreInHand;
            this.MazeScoreInBag = mazeScoreInBag;
            this.PlayerScore = playerScore;
        }
        
        /// <summary>
        /// The public unique identifier of a player.
        /// </summary>
        /// <value>The public unique identifier of a player.</value>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public string PlayerId { get; set; }

        /// <summary>
        /// The name a player has chosen to represent her.
        /// </summary>
        /// <value>The name a player has chosen to represent her.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An indication of whether a player is currently playing a maze or not.
        /// </summary>
        /// <value>An indication of whether a player is currently playing a maze or not.</value>
        [DataMember(Name="isInPlaythrough", EmitDefaultValue=false)]
        public bool? IsInPlaythrough { get; set; }

        /// <summary>
        /// The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.
        /// </summary>
        /// <value>The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.</value>
        [DataMember(Name="maze", EmitDefaultValue=false)]
        public string Maze { get; set; }

        /// <summary>
        /// Wink wink.
        /// </summary>
        /// <value>Wink wink.</value>
        [DataMember(Name="hasFoundEasterEgg", EmitDefaultValue=false)]
        public bool? HasFoundEasterEgg { get; set; }

        /// <summary>
        /// How much score the player has in her hand. Only available if player is playing a maze.
        /// </summary>
        /// <value>How much score the player has in her hand. Only available if player is playing a maze.</value>
        [DataMember(Name="mazeScoreInHand", EmitDefaultValue=false)]
        public int? MazeScoreInHand { get; set; }

        /// <summary>
        /// How much score the player has in her bag. Only available if player is playing a maze.
        /// </summary>
        /// <value>How much score the player has in her bag. Only available if player is playing a maze.</value>
        [DataMember(Name="mazeScoreInBag", EmitDefaultValue=false)]
        public int? MazeScoreInBag { get; set; }

        /// <summary>
        /// The accumulated score across all played mazes.
        /// </summary>
        /// <value>The accumulated score across all played mazes.</value>
        [DataMember(Name="playerScore", EmitDefaultValue=false)]
        public int? PlayerScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerInfo {\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsInPlaythrough: ").Append(IsInPlaythrough).Append("\n");
            sb.Append("  Maze: ").Append(Maze).Append("\n");
            sb.Append("  HasFoundEasterEgg: ").Append(HasFoundEasterEgg).Append("\n");
            sb.Append("  MazeScoreInHand: ").Append(MazeScoreInHand).Append("\n");
            sb.Append("  MazeScoreInBag: ").Append(MazeScoreInBag).Append("\n");
            sb.Append("  PlayerScore: ").Append(PlayerScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerInfo);
        }

        /// <summary>
        /// Returns true if PlayerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsInPlaythrough == input.IsInPlaythrough ||
                    (this.IsInPlaythrough != null &&
                    this.IsInPlaythrough.Equals(input.IsInPlaythrough))
                ) && 
                (
                    this.Maze == input.Maze ||
                    (this.Maze != null &&
                    this.Maze.Equals(input.Maze))
                ) && 
                (
                    this.HasFoundEasterEgg == input.HasFoundEasterEgg ||
                    (this.HasFoundEasterEgg != null &&
                    this.HasFoundEasterEgg.Equals(input.HasFoundEasterEgg))
                ) && 
                (
                    this.MazeScoreInHand == input.MazeScoreInHand ||
                    (this.MazeScoreInHand != null &&
                    this.MazeScoreInHand.Equals(input.MazeScoreInHand))
                ) && 
                (
                    this.MazeScoreInBag == input.MazeScoreInBag ||
                    (this.MazeScoreInBag != null &&
                    this.MazeScoreInBag.Equals(input.MazeScoreInBag))
                ) && 
                (
                    this.PlayerScore == input.PlayerScore ||
                    (this.PlayerScore != null &&
                    this.PlayerScore.Equals(input.PlayerScore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IsInPlaythrough != null)
                    hashCode = hashCode * 59 + this.IsInPlaythrough.GetHashCode();
                if (this.Maze != null)
                    hashCode = hashCode * 59 + this.Maze.GetHashCode();
                if (this.HasFoundEasterEgg != null)
                    hashCode = hashCode * 59 + this.HasFoundEasterEgg.GetHashCode();
                if (this.MazeScoreInHand != null)
                    hashCode = hashCode * 59 + this.MazeScoreInHand.GetHashCode();
                if (this.MazeScoreInBag != null)
                    hashCode = hashCode * 59 + this.MazeScoreInBag.GetHashCode();
                if (this.PlayerScore != null)
                    hashCode = hashCode * 59 + this.PlayerScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
