/* 
 * A-maze-ing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMazeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// üí∞ Collect score from your hand to your bag.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore CollectScore ();

        /// <summary>
        /// üí∞ Collect score from your hand to your bag.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> CollectScoreWithHttpInfo ();
        /// <summary>
        /// üåü Enter a maze.
        /// </summary>
        /// <remarks>
        /// Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore Enter (string mazeName = null);

        /// <summary>
        /// üåü Enter a maze.
        /// </summary>
        /// <remarks>
        /// Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> EnterWithHttpInfo (string mazeName = null);
        /// <summary>
        /// üö™ Exit the maze.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ExitMaze ();

        /// <summary>
        /// üö™ Exit the maze.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExitMazeWithHttpInfo ();
        /// <summary>
        /// ‚¨á Move down.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore MoveDown ();

        /// <summary>
        /// ‚¨á Move down.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> MoveDownWithHttpInfo ();
        /// <summary>
        /// ‚¨Ö Move left.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore MoveLeft ();

        /// <summary>
        /// ‚¨Ö Move left.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> MoveLeftWithHttpInfo ();
        /// <summary>
        /// ‚û° Move right.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore MoveRight ();

        /// <summary>
        /// ‚û° Move right.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> MoveRightWithHttpInfo ();
        /// <summary>
        /// ‚¨Ü Move up.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore MoveUp ();

        /// <summary>
        /// ‚¨Ü Move up.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> MoveUpWithHttpInfo ();
        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        PossibleActionsAndCurrentScore PossibleActions ();

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        ApiResponse<PossibleActionsAndCurrentScore> PossibleActionsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// üí∞ Collect score from your hand to your bag.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> CollectScoreAsync ();

        /// <summary>
        /// üí∞ Collect score from your hand to your bag.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> CollectScoreAsyncWithHttpInfo ();
        /// <summary>
        /// üåü Enter a maze.
        /// </summary>
        /// <remarks>
        /// Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> EnterAsync (string mazeName = null);

        /// <summary>
        /// üåü Enter a maze.
        /// </summary>
        /// <remarks>
        /// Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> EnterAsyncWithHttpInfo (string mazeName = null);
        /// <summary>
        /// üö™ Exit the maze.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExitMazeAsync ();

        /// <summary>
        /// üö™ Exit the maze.
        /// </summary>
        /// <remarks>
        /// Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExitMazeAsyncWithHttpInfo ();
        /// <summary>
        /// ‚¨á Move down.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveDownAsync ();

        /// <summary>
        /// ‚¨á Move down.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveDownAsyncWithHttpInfo ();
        /// <summary>
        /// ‚¨Ö Move left.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveLeftAsync ();

        /// <summary>
        /// ‚¨Ö Move left.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveLeftAsyncWithHttpInfo ();
        /// <summary>
        /// ‚û° Move right.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveRightAsync ();

        /// <summary>
        /// ‚û° Move right.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveRightAsyncWithHttpInfo ();
        /// <summary>
        /// ‚¨Ü Move up.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveUpAsync ();

        /// <summary>
        /// ‚¨Ü Move up.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveUpAsyncWithHttpInfo ();
        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> PossibleActionsAsync ();

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing.
        /// </summary>
        /// <remarks>
        /// You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> PossibleActionsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MazeApi : IMazeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MazeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MazeApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MazeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MazeApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// üí∞ Collect score from your hand to your bag. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore CollectScore ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = CollectScoreWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// üí∞ Collect score from your hand to your bag. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > CollectScoreWithHttpInfo ()
        {

            var localVarPath = "/api/maze/collectScore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üí∞ Collect score from your hand to your bag. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> CollectScoreAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await CollectScoreAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// üí∞ Collect score from your hand to your bag. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> CollectScoreAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/collectScore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üåü Enter a maze. Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore Enter (string mazeName = null)
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = EnterWithHttpInfo(mazeName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// üåü Enter a maze. Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > EnterWithHttpInfo (string mazeName = null)
        {

            var localVarPath = "/api/maze/enter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mazeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mazeName", mazeName)); // query parameter

            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Enter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üåü Enter a maze. Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> EnterAsync (string mazeName = null)
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await EnterAsyncWithHttpInfo(mazeName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// üåü Enter a maze. Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \&quot;multiple times\&quot;, you need to request to forget your player data (via the player API).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mazeName">What maze do you wish to enter. (optional)</param>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> EnterAsyncWithHttpInfo (string mazeName = null)
        {

            var localVarPath = "/api/maze/enter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mazeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mazeName", mazeName)); // query parameter

            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Enter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üö™ Exit the maze. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ExitMaze ()
        {
             ExitMazeWithHttpInfo();
        }

        /// <summary>
        /// üö™ Exit the maze. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExitMazeWithHttpInfo ()
        {

            var localVarPath = "/api/maze/exit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitMaze", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// üö™ Exit the maze. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExitMazeAsync ()
        {
             await ExitMazeAsyncWithHttpInfo();

        }

        /// <summary>
        /// üö™ Exit the maze. Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.   Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExitMazeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/exit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExitMaze", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// ‚¨á Move down. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore MoveDown ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = MoveDownWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ‚¨á Move down. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > MoveDownWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/down";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveDown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚¨á Move down. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveDownAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await MoveDownAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ‚¨á Move down. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveDownAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/down";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveDown", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚¨Ö Move left. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore MoveLeft ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = MoveLeftWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ‚¨Ö Move left. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > MoveLeftWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/left";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveLeft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚¨Ö Move left. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveLeftAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await MoveLeftAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ‚¨Ö Move left. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveLeftAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/left";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveLeft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚û° Move right. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore MoveRight ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = MoveRightWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ‚û° Move right. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > MoveRightWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/right";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveRight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚û° Move right. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveRightAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await MoveRightAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ‚û° Move right. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveRightAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/right";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveRight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚¨Ü Move up. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore MoveUp ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = MoveUpWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// ‚¨Ü Move up. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > MoveUpWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/up";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// ‚¨Ü Move up. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> MoveUpAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await MoveUpAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// ‚¨Ü Move up. You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \&quot;wall\&quot; in your way and you try to move there.. well, it&#39;s gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. ü§∑üèª‚Äç
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> MoveUpAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/move/up";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing. You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PossibleActionsAndCurrentScore</returns>
        public PossibleActionsAndCurrentScore PossibleActions ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = PossibleActionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing. You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PossibleActionsAndCurrentScore</returns>
        public ApiResponse< PossibleActionsAndCurrentScore > PossibleActionsWithHttpInfo ()
        {

            var localVarPath = "/api/maze/possibleActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PossibleActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing. You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PossibleActionsAndCurrentScore</returns>
        public async System.Threading.Tasks.Task<PossibleActionsAndCurrentScore> PossibleActionsAsync ()
        {
             ApiResponse<PossibleActionsAndCurrentScore> localVarResponse = await PossibleActionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// üëÄ Get the list of possible actions, from the tile where you are standing. You must have already entered a maze. Also, you shouldn&#39;t require this method that much, given than any action you perform on the maze will return this same information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PossibleActionsAndCurrentScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PossibleActionsAndCurrentScore>> PossibleActionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/maze/possibleActions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (User token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PossibleActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PossibleActionsAndCurrentScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PossibleActionsAndCurrentScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PossibleActionsAndCurrentScore)));
        }

    }
}
